// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: task.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const completeTask = `-- name: CompleteTask :one
UPDATE task
SET
    completed_at = NOW ()
WHERE
    id = $1 RETURNING id, name, description, created_at, completed_at, pomo_user_id
`

func (q *Queries) CompleteTask(ctx context.Context, id int32) (Task, error) {
	row := q.db.QueryRow(ctx, completeTask, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.CompletedAt,
		&i.PomoUserID,
	)
	return i, err
}

const createTask = `-- name: CreateTask :one
INSERT INTO
    task (name, description, pomo_user_id)
VALUES
    ($1, $2, $3) RETURNING id, name, description, created_at, completed_at, pomo_user_id
`

type CreateTaskParams struct {
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
	PomoUserID  int32       `json:"pomo_user_id"`
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRow(ctx, createTask, arg.Name, arg.Description, arg.PomoUserID)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.CompletedAt,
		&i.PomoUserID,
	)
	return i, err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM task
WHERE
    id = $1
`

func (q *Queries) DeleteTask(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteTask, id)
	return err
}

const getTasksOfUser = `-- name: GetTasksOfUser :many
SELECT
    id, name, description, created_at, completed_at, pomo_user_id
FROM
    task
WHERE
    pomo_user_id = $1
`

func (q *Queries) GetTasksOfUser(ctx context.Context, pomoUserID int32) ([]Task, error) {
	rows, err := q.db.Query(ctx, getTasksOfUser, pomoUserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Task{}
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.CompletedAt,
			&i.PomoUserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
