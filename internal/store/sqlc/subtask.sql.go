// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: subtask.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const completeSubtask = `-- name: CompleteSubtask :one
UPDATE subtask
SET
    completed_at = NOW ()
WHERE
    id = $1 RETURNING id, name, description, created_at, completed_at, pomos_required, task_id
`

func (q *Queries) CompleteSubtask(ctx context.Context, id int32) (Subtask, error) {
	row := q.db.QueryRow(ctx, completeSubtask, id)
	var i Subtask
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.CompletedAt,
		&i.PomosRequired,
		&i.TaskID,
	)
	return i, err
}

const createSubtask = `-- name: CreateSubtask :one
INSERT INTO
    subtask (name, description, pomos_required, task_id)
VALUES
    ($1, $2, $3, $4) RETURNING id, name, description, created_at, completed_at, pomos_required, task_id
`

type CreateSubtaskParams struct {
	Name          string      `json:"name"`
	Description   pgtype.Text `json:"description"`
	PomosRequired int32       `json:"pomos_required"`
	TaskID        int32       `json:"task_id"`
}

func (q *Queries) CreateSubtask(ctx context.Context, arg CreateSubtaskParams) (Subtask, error) {
	row := q.db.QueryRow(ctx, createSubtask,
		arg.Name,
		arg.Description,
		arg.PomosRequired,
		arg.TaskID,
	)
	var i Subtask
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.CompletedAt,
		&i.PomosRequired,
		&i.TaskID,
	)
	return i, err
}

const deleteSubtask = `-- name: DeleteSubtask :exec
DELETE FROM subtask
WHERE
    id = $1
`

func (q *Queries) DeleteSubtask(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteSubtask, id)
	return err
}

const getSubtasksOfTask = `-- name: GetSubtasksOfTask :many
SELECT
    id, name, description, created_at, completed_at, pomos_required, task_id
FROM
    subtask
where
    task_id = $1
`

func (q *Queries) GetSubtasksOfTask(ctx context.Context, taskID int32) ([]Subtask, error) {
	rows, err := q.db.Query(ctx, getSubtasksOfTask, taskID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Subtask{}
	for rows.Next() {
		var i Subtask
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.CompletedAt,
			&i.PomosRequired,
			&i.TaskID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
