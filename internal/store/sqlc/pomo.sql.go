// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: pomo.sql

package db

import (
	"context"
)

const cancelPomo = `-- name: CancelPomo :one
UPDATE pomo
SET
    is_completed = FALSE,
    is_running = FALSE
WHERE
    id = $1 RETURNING id, started_at, completed_at, is_completed, is_running, subtask_id
`

func (q *Queries) CancelPomo(ctx context.Context, id int32) (Pomo, error) {
	row := q.db.QueryRow(ctx, cancelPomo, id)
	var i Pomo
	err := row.Scan(
		&i.ID,
		&i.StartedAt,
		&i.CompletedAt,
		&i.IsCompleted,
		&i.IsRunning,
		&i.SubtaskID,
	)
	return i, err
}

const completePomo = `-- name: CompletePomo :one
UPDATE pomo
SET
    is_completed = TRUE,
    is_running = FALSE,
    completed_at = NOW ()
WHERE
    id = $1 RETURNING id, started_at, completed_at, is_completed, is_running, subtask_id
`

func (q *Queries) CompletePomo(ctx context.Context, id int32) (Pomo, error) {
	row := q.db.QueryRow(ctx, completePomo, id)
	var i Pomo
	err := row.Scan(
		&i.ID,
		&i.StartedAt,
		&i.CompletedAt,
		&i.IsCompleted,
		&i.IsRunning,
		&i.SubtaskID,
	)
	return i, err
}

const createPomo = `-- name: CreatePomo :one
INSERT INTO
    pomo (subtask_id)
VALUES
    ($1) RETURNING id, started_at, completed_at, is_completed, is_running, subtask_id
`

func (q *Queries) CreatePomo(ctx context.Context, subtaskID int32) (Pomo, error) {
	row := q.db.QueryRow(ctx, createPomo, subtaskID)
	var i Pomo
	err := row.Scan(
		&i.ID,
		&i.StartedAt,
		&i.CompletedAt,
		&i.IsCompleted,
		&i.IsRunning,
		&i.SubtaskID,
	)
	return i, err
}

const getAllPomosOfSubTask = `-- name: GetAllPomosOfSubTask :many
SELECT
    id, started_at, completed_at, is_completed, is_running, subtask_id
FROM
    pomo
WHERE
    subtask_id = $1
`

func (q *Queries) GetAllPomosOfSubTask(ctx context.Context, subtaskID int32) ([]Pomo, error) {
	rows, err := q.db.Query(ctx, getAllPomosOfSubTask, subtaskID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Pomo{}
	for rows.Next() {
		var i Pomo
		if err := rows.Scan(
			&i.ID,
			&i.StartedAt,
			&i.CompletedAt,
			&i.IsCompleted,
			&i.IsRunning,
			&i.SubtaskID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCompletedPomosOfSubTask = `-- name: GetCompletedPomosOfSubTask :many
SELECT
    id, started_at, completed_at, is_completed, is_running, subtask_id
FROM
    pomo
WHERE
    subtask_id = $1
    AND is_completed = TRUE
`

func (q *Queries) GetCompletedPomosOfSubTask(ctx context.Context, subtaskID int32) ([]Pomo, error) {
	rows, err := q.db.Query(ctx, getCompletedPomosOfSubTask, subtaskID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Pomo{}
	for rows.Next() {
		var i Pomo
		if err := rows.Scan(
			&i.ID,
			&i.StartedAt,
			&i.CompletedAt,
			&i.IsCompleted,
			&i.IsRunning,
			&i.SubtaskID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRunningPomoOfSubTask = `-- name: GetRunningPomoOfSubTask :one
SELECT
    id, started_at, completed_at, is_completed, is_running, subtask_id
FROM
    pomo
WHERE
    subtask_id = $1
    AND is_running = TRUE
LIMIT
    1
`

func (q *Queries) GetRunningPomoOfSubTask(ctx context.Context, subtaskID int32) (Pomo, error) {
	row := q.db.QueryRow(ctx, getRunningPomoOfSubTask, subtaskID)
	var i Pomo
	err := row.Scan(
		&i.ID,
		&i.StartedAt,
		&i.CompletedAt,
		&i.IsCompleted,
		&i.IsRunning,
		&i.SubtaskID,
	)
	return i, err
}
